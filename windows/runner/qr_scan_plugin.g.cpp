// Autogenerated from Pigeon (v24.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "qr_scan_plugin.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace qr_scan_plugin {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
  return FlutterError(
      "channel-error",
      "Unable to establish connection on channel: '" + channel_name + "'.",
      EncodableValue(""));
}

// SaveQrScan

SaveQrScan::SaveQrScan(
  const std::string& qr_data,
  const std::string& date)
 : qr_data_(qr_data),
    date_(date) {}

const std::string& SaveQrScan::qr_data() const {
  return qr_data_;
}

void SaveQrScan::set_qr_data(std::string_view value_arg) {
  qr_data_ = value_arg;
}


const std::string& SaveQrScan::date() const {
  return date_;
}

void SaveQrScan::set_date(std::string_view value_arg) {
  date_ = value_arg;
}


EncodableList SaveQrScan::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(qr_data_));
  list.push_back(EncodableValue(date_));
  return list;
}

SaveQrScan SaveQrScan::FromEncodableList(const EncodableList& list) {
  SaveQrScan decoded(
    std::get<std::string>(list[0]),
    std::get<std::string>(list[1]));
  return decoded;
}


PigeonInternalCodecSerializer::PigeonInternalCodecSerializer() {}

EncodableValue PigeonInternalCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 129: {
        return CustomEncodableValue(SaveQrScan::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
    }
}

void PigeonInternalCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(SaveQrScan)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<SaveQrScan>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by QrApi.
const flutter::StandardMessageCodec& QrApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&PigeonInternalCodecSerializer::GetInstance());
}

// Sets up an instance of `QrApi` to handle messages through the `binary_messenger`.
void QrApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  QrApi* api) {
  QrApi::SetUp(binary_messenger, api, "");
}

void QrApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  QrApi* api,
  const std::string& message_channel_suffix) {
  const std::string prepended_suffix = message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "";
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.qr_scan_plugin_package.QrApi.setQrData" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_request_arg = args.at(0);
          if (encodable_request_arg.IsNull()) {
            reply(WrapError("request_arg unexpectedly null."));
            return;
          }
          const auto& request_arg = std::any_cast<const SaveQrScan&>(std::get<CustomEncodableValue>(encodable_request_arg));
          std::optional<FlutterError> output = api->SetQrData(request_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue QrApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue QrApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace qr_scan_plugin
